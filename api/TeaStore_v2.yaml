openapi: "3.0.3"
info:
  title: "TeaStore v2 API"
  description: "Netty TeaStore API"
  version: "2.0.0"
servers:
  - url: "http://localhost:80"
  - url: "https://localhost:443"
  - url: "https://localhost:50781"
paths:
  /api/web/isready:
    get:
      summary: "This methods checks, if the service is ready."
      responses:
        "200":
          description: "OK"
      tags:
        - Web
  /api/web/about:
    get:
      summary: "Return view 'About us'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/cartaction/addtocart:
    get:
      summary: "Add product to cart."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "productid"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/cartaction/removeproduct:
    get:
      summary: "Remove product from cart, return view 'Cart'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "productid"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/cartaction/updatecartquantities:
    get:
      summary: "Update cart quantity, return view 'Cart'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "productid"
          in: "query"
          schema:
            type: integer
          required: true
        - name: "quantity"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/cartaction/proceedtocheckout:
    get:
      summary: "Proceed to checkout, return view 'Login' or 'Order'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
      tags:
        - Web
  /api/web/cartaction/confirm:
    post:
      summary: "Confirm order, return view 'Profile'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
      tags:
        - Web
  /api/web/cart:
    get:
      summary: "Return view 'Cart'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/category:
    get:
      summary: "Return view 'Category'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: true
        - name: "productquantity"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "page"
          in: "query"
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/databaseaction:
    get:
      summary: "Generate content for database and return view 'Index'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "categories"
          in: "query"
          schema:
            type: integer
          required: true
        - name: "products"
          in: "query"
          schema:
            type: integer
          required: true
        - name: "users"
          in: "query"
          schema:
            type: integer
          required: true
        - name: "orders"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/database:
    get:
      summary: "Return view 'Database'."
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/error:
    get:
      summary: "Return view 'Error'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/index:
    get:
      summary: "Return view 'Index'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/logioaction:
    post:
      summary: "Log in (username & password) or log out (cookie) and return view 'Index'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "username"
          in: "query"
          schema:
            type: string
        - name: "password"
          in: "query"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/login:
    get:
      summary: "Return view 'Login'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/order:
    get:
      summary: "Return view 'Order'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/product:
    get:
      summary: "Return view 'Product'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/web/profile:
    get:
      summary: "Return view 'Profile'."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Web
  /api/persistence/cache:
    delete:
      summary: "Clears the cache for the/all class(es)."
      parameters:
        - name: "classname"
          in: "query"
          schema:
            type: string
          required: false
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
      tags:
        - Persistence
  /api/persistence/emf:
    delete:
      summary: "Return view 'Profile'."
      responses:
        "200":
          description: "OK"
      tags:
        - Persistence
  /api/persistence/categories:
    get:
      summary: "Return a single (id) or all categories (start = startIndex, max = maxResultCount)."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "start"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "max"
          in: "query"
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    post:
      summary: "Create category and return it (id changes)."
      requestBody:
        $ref: '#/components/requestBodies/Category'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
    put:
      summary: "Update category and return updated category."
      requestBody:
        $ref: '#/components/requestBodies/Category'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    delete:
      summary: "Delete a category."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
  /api/persistence/generatedb:
    get:
      summary: "Drop database, generate a new one and return status."
      parameters:
        - name: "categories"
          in: "query"
          schema:
            type: integer
          required: true
        - name: "products"
          in: "query"
          schema:
            type: integer
          required: true
        - name: "users"
          in: "query"
          schema:
            type: integer
          required: true
        - name: "orders"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
  /api/persistence/generatedb/finished:
    get:
      summary: "Return true or false."
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
  /api/persistence/generatedb/maintenance:
    get:
      summary: "Return true or false."
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    post:
      summary: "En- or disable maintenance mode and return status."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maintenanceMode:
                  type: boolean
              required:
                - maintenanceMode
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
  /api/persistence/orders:
    get:
      summary: "Return a single (id) or all orders (userid, start = startIndex, max = maxResultCount)."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "userid"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "start"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "max"
          in: "query"
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    post:
      summary: "Create order and return it (id changes)."
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
    put:
      summary: "Update order and return updated order."
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    delete:
      summary: "Delete a order."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
  /api/persistence/orderitems:
    get:
      summary: "Return a single (id) or all order items (productid, orderid, start = startIndex, max = maxResultCount)."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "productid"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "orderid"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "start"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "max"
          in: "query"
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    post:
      summary: "Create order item and return it (id changes)."
      requestBody:
        $ref: '#/components/requestBodies/OrderItem'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
    put:
      summary: "Update order item and return updated order item."
      requestBody:
        $ref: '#/components/requestBodies/OrderItem'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    delete:
      summary: "Delete a order item."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
  /api/persistence/products:
    get:
      summary: "Return a single (id) or all products (categoryid, start = startIndex, max = maxResultCount)."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "categoryid"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "start"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "max"
          in: "query"
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    post:
      summary: "Create product and return it (id changes)."
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
    put:
      summary: "Update product and return updated product."
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    delete:
      summary: "Delete a product."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
  /api/persistence/products/count:
    get:
      summary: "Return number of products in a category."
      parameters:
        - name: "categoryid"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
  /api/persistence/users:
    get:
      summary: "Return a single (id) or all users (start = startIndex, max = maxResultCount)."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "start"
          in: "query"
          schema:
            type: integer
          required: false
        - name: "max"
          in: "query"
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    post:
      summary: "Create user and return it (id changes)."
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
    put:
      summary: "Update user and return updated user."
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
    delete:
      summary: "Delete an user."
      parameters:
        - name: "id"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "503":
          description: "Service Unavailable"
      tags:
        - Persistence
  /api/persistence/users/name:
    get:
      summary: "Return a single user by name."
      parameters:
        - name: "name"
          in: "query"
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Persistence
  /api/image/productimages:
    post:
      summary: "Return map of product ids and image data."
      requestBody:
        $ref: '#/components/requestBodies/ProductImageSizeMap'
      responses:
        "200":
          $ref: '#/components/responses/ProductImageDataMap'
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Image
  /api/image/webimages:
    post:
      summary: "Return map of image names with image data."
      requestBody:
        $ref: '#/components/requestBodies/NameImageSizeMap'
      responses:
        "200":
          $ref: '#/components/responses/NameImageDataMap'
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Image
  /api/image/regenerateimages:
    get:
      summary: "Regenerate all product images and return OK."
      responses:
        "200":
          description: "OK"
      tags:
        - Image
  /api/image/finished:
    get:
      summary: "Return service setup state."
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: boolean
        "500":
          description: "Internal Server Error"
      tags:
        - Image
  /api/image/state:
    get:
      summary: "Return service status."
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
      tags:
        - Image
  /api/image/setcachesize:
    post:
      summary: "Set cache size and return success state."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Image
  /api/recommender/recommend:
    post:
      summary: "Return a list of all recommended products based on multiple order items."
      parameters:
        - name: "userid"
          in: "query"
          schema:
            type: integer
          required: false
      requestBody:
        $ref: '#/components/requestBodies/OrderItemList'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Recommender
  /api/recommender/recommendsingle:
    post:
      summary: "Return a list of all recommended products based on a single order item."
      parameters:
        - name: "userid"
          in: "query"
          schema:
            type: integer
          required: false
      requestBody:
        $ref: '#/components/requestBodies/OrderItem'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Recommender
  /api/recommender/train:
    get:
      summary: "Trigger training of the recommendation algorithm."
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal Server Error"
      tags:
        - Recommender
  /api/recommender/train/timestamp:
    get:
      summary: "Return the last training time stamp of this service instance."
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
      tags:
        - Recommender
  /api/recommender/train/isready:
    get:
      summary: "Return service status."
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: boolean
        "500":
          description: "Internal Server Error"
      tags:
        - Recommender
  /api/auth/isready:
    get:
      summary: "This methods checks, if the service is ready."
      responses:
        "200":
          description: "OK"
      tags:
        - Auth
  /api/auth/cart/add:
    post:
      summary: "Add product to cart and return updated session data."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "productid"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          $ref: '#/components/responses/SessionData'
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Auth
  /api/auth/cart/remove:
    post:
      summary: "Remove product from cart and return updated session data."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "productid"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          $ref: '#/components/responses/SessionData'
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Auth
  /api/auth/cart/update:
    put:
      summary: "Updates quantity of product in cart and return updated session data."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "productid"
          in: "query"
          schema:
            type: integer
          required: true
        - name: "quantity"
          in: "query"
          schema:
            type: integer
          required: true
      responses:
        "200":
          $ref: '#/components/responses/SessionData'
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Auth
  /api/auth/useractions/placeorder:
    post:
      summary: "Persists order in database and return updated session data."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        "200":
          $ref: '#/components/responses/SessionData'
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Auth
  /api/auth/useractions/login:
    post:
      summary: "Log in user and return updated session data."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
        - name: "name"
          in: "query"
          schema:
            type: string
          required: true
        - name: "password"
          in: "query"
          schema:
            type: string
          required: true
      responses:
        "200":
          $ref: '#/components/responses/SessionData'
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
      tags:
        - Auth
  /api/auth/useractions/logout:
    post:
      summary: "Log out user and return updated session data."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/SessionData'
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Auth
  /api/auth/useractions/isloggedin:
    post:
      summary: "Check if user is logged in and return updated session data."
      parameters:
        - in: "cookie"
          name: "Session data"
          description: "Session data encoded as UTF-8 string"
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/SessionData'
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      tags:
        - Auth
  /api/auth/useractions/isready:
    post:
      summary: "Check if service is ready and return true."
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: boolean
        "500":
          description: "Internal Server Error"
      tags:
        - Auth
components:
  requestBodies:
    Category:
      description: Category as JSON object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              description:
                type: string
            required:
              - id
              - name
              - description
    Order:
      description: Order as JSON object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
              userId:
                type: integer
              time:
                type: string
              totalPriceInCents:
                type: integer
              addressName:
                type: string
              address1:
                type: string
              address2:
                type: string
              creditCardCompany:
                type: string
              creditCardNumber:
                type: string
              creditCardExpiryDate:
                type: string
            required:
              - id
              - userId
              - time
              - totalPriceInCents
              - addressName
              - address1
              - address2
              - creditCardCompany
              - creditCardNumber
              - creditCardExpiryDate
    OrderItem:
      description: Order item as JSON object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
              productId:
                type: integer
              orderId:
                type: integer
              quantity:
                type: integer
              unitPriceInCents:
                type: integer
            required:
              - id
              - productId
              - orderId
              - quantity
              - unitPriceInCents
    Product:
      description: Product as JSON object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
              categoryId:
                type: integer
              name:
                type: string
              description:
                type: string
              listPriceInCents:
                type: integer
            required:
              - id
              - categoryId
              - name
              - description
              - listPriceInCents
    User:
      description: User as JSON object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
              userName:
                type: string
              password:
                type: string
              realName:
                type: string
              email:
                type: string
            required:
              - id
              - userName
              - password
              - realName
              - email
    ProductImageSizeMap:
      description: Map of product ids and image size as JSON object
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                size:
                  type: string
              required:
                - id
                - size
    NameImageSizeMap:
      description: Map of image names and image data as JSON object
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                size:
                  type: string
              required:
                - name
                - size
    OrderItemList:
      description: Order item as JSON object
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                productId:
                  type: integer
                orderId:
                  type: integer
                quantity:
                  type: integer
                unitPriceInCents:
                  type: integer
              required:
                - id
                - productId
                - orderId
                - quantity
                - unitPriceInCents
  responses:
    SessionData:
      description: Session data as JSON object
      content:
        application/json:
          schema:
            type: object
            properties:
              userId:
                type: integer
              sessionId:
                type: string
              token:
                type: string
              order:
                type: object
                properties:
                  id:
                    type: integer
                  userId:
                    type: integer
                  time:
                    type: string
                  totalPriceInCents:
                    type: integer
                  addressName:
                    type: string
                  address1:
                    type: string
                  address2:
                    type: string
                  creditCardCompany:
                    type: string
                  creditCardNumber:
                    type: string
                  creditCardExpiryDate:
                    type: string
              orderItems:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    productId:
                      type: integer
                    orderId:
                      type: integer
                    quantity:
                      type: integer
                    unitPriceInCents:
                      type: integer
              message:
                type: string
    ProductImageDataMap:
      description: Map of product ids and image data as JSON object
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                imageData:
                  type: string
    NameImageDataMap:
      description: Map of image names and image data as JSON object
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                imageData:
                  type: string